# -*- coding: utf-8 -*-
from numpy import *
from random import *
from pylab import *

#this program by http://sonoshou.hatenablog.jp/entry/20121011/1349960722
def difcost(a, b):
	dif = 0
	# 行列の全ての行と列をループする。
	for i in range(shape(a)[0]):
		for j in range(shape(a)[1]):
			# 差を足し合わせる
			dif += pow(a[i,j]-b[i,j],2)
	return dif

def factorize(x, pc=10, iter=50):
	ic=shape(v)[0]	# shape関数は行列の行と列の数を返す。
	fc=shape(v)[1]

	# 重みと特徴の行列をランダムな値で初期化
	t = matrix([[random() for j in range(pc)] for i in range(ic)])
	v = matrix([[random() for i in range(fc)] for i in range(pc)])

    t2 = zeros((ic,pc))
    v2 = zeros((pc,fc))
	# 最大でiterの回数だけ操作を繰り返す:
	for m in range(iter):

        tv = t * v

		# 現在の差を計算
		cost = difcost(x, tv)

		# 行列が完全に因子分解されたら終了
		if cost == 0:
			break

		# 特徴の行列を更新
        for k in range(pc):
            for i in range(ic):
                sum_up = 0.0
                sum_down = 0.0
                for j in range(fc):
                    sum_up += x[i,j] * v[k,j]
                    sum_down += t[i].transpose.dot(v[j]) * v[k,j]
                t2[i,k] = t[i,k] * sum_up / sum_down
            for j in range(fc):
                sum_up = 0.0
                sum_down = 0.0
                for i in range(ic):
                    sum_up += x[i,j] * t[i,k]
                    sum_down += t[i].transpose.dot(v[j]) * t[i,k]
                v2[k,j] = v[k,j] * sum_up / sum_down
        t = t2
        v = v2
	return t,v

if __name__ == '__main__':
    #irisデータ
	mat=matrix([[5.1,3.5,1.4,0.2],
	[4.9,3,1.4,0.2],
	[4.7,3.2,1.3,0.2],
	[4.6,3.1,1.5,0.2],
	[5,3.6,1.4,0.2],
	[5.4,3.9,1.7,0.4],
	[4.6,3.4,1.4,0.3],
	[5,3.4,1.5,0.2],
	[4.4,2.9,1.4,0.2],
	[4.9,3.1,1.5,0.1],
	[5.4,3.7,1.5,0.2],
	[4.8,3.4,1.6,0.2],
	[4.8,3,1.4,0.1],
	[4.3,3,1.1,0.1],
	[5.8,4,1.2,0.2],
	[5.7,4.4,1.5,0.4],
	[5.4,3.9,1.3,0.4],
	[5.1,3.5,1.4,0.3],
	[5.7,3.8,1.7,0.3],
	[5.1,3.8,1.5,0.3],
	[5.4,3.4,1.7,0.2],
	[5.1,3.7,1.5,0.4],
	[4.6,3.6,1,0.2],
	[5.1,3.3,1.7,0.5],
	[4.8,3.4,1.9,0.2],
	[5,3,1.6,0.2],
	[5,3.4,1.6,0.4],
	[5.2,3.5,1.5,0.2],
	[5.2,3.4,1.4,0.2],
	[4.7,3.2,1.6,0.2],
	[4.8,3.1,1.6,0.2],
	[5.4,3.4,1.5,0.4],
	[5.2,4.1,1.5,0.1],
	[5.5,4.2,1.4,0.2],
	[4.9,3.1,1.5,0.2],
	[5,3.2,1.2,0.2],
	[5.5,3.5,1.3,0.2],
	[4.9,3.6,1.4,0.1],
	[4.4,3,1.3,0.2],
	[5.1,3.4,1.5,0.2],
	[5,3.5,1.3,0.3],
	[4.5,2.3,1.3,0.3],
	[4.4,3.2,1.3,0.2],
	[5,3.5,1.6,0.6],
	[5.1,3.8,1.9,0.4],
	[4.8,3,1.4,0.3],
	[5.1,3.8,1.6,0.2],
	[4.6,3.2,1.4,0.2],
	[5.3,3.7,1.5,0.2],
	[5,3.3,1.4,0.2],
	[7,3.2,4.7,1.4],
	[6.4,3.2,4.5,1.5],
	[6.9,3.1,4.9,1.5],
	[5.5,2.3,4,1.3],
	[6.5,2.8,4.6,1.5],
	[5.7,2.8,4.5,1.3],
	[6.3,3.3,4.7,1.6],
	[4.9,2.4,3.3,1],
	[6.6,2.9,4.6,1.3],
	[5.2,2.7,3.9,1.4],
	[5,2,3.5,1],
	[5.9,3,4.2,1.5],
	[6,2.2,4,1],
	[6.1,2.9,4.7,1.4],
	[5.6,2.9,3.6,1.3],
	[6.7,3.1,4.4,1.4],
	[5.6,3,4.5,1.5],
	[5.8,2.7,4.1,1],
	[6.2,2.2,4.5,1.5],
	[5.6,2.5,3.9,1.1],
	[5.9,3.2,4.8,1.8],
	[6.1,2.8,4,1.3],
	[6.3,2.5,4.9,1.5],
	[6.1,2.8,4.7,1.2],
	[6.4,2.9,4.3,1.3],
	[6.6,3,4.4,1.4],
	[6.8,2.8,4.8,1.4],
	[6.7,3,5,1.7],
	[6,2.9,4.5,1.5],
	[5.7,2.6,3.5,1],
	[5.5,2.4,3.8,1.1],
	[5.5,2.4,3.7,1],
	[5.8,2.7,3.9,1.2],
	[6,2.7,5.1,1.6],
	[5.4,3,4.5,1.5],
	[6,3.4,4.5,1.6],
	[6.7,3.1,4.7,1.5],
	[6.3,2.3,4.4,1.3],
	[5.6,3,4.1,1.3],
	[5.5,2.5,4,1.3],
	[5.5,2.6,4.4,1.2],
	[6.1,3,4.6,1.4],
	[5.8,2.6,4,1.2],
	[5,2.3,3.3,1],
	[5.6,2.7,4.2,1.3],
	[5.7,3,4.2,1.2],
	[5.7,2.9,4.2,1.3],
	[6.2,2.9,4.3,1.3],
	[5.1,2.5,3,1.1],
	[5.7,2.8,4.1,1.3],
	[6.3,3.3,6,2.5],
	[5.8,2.7,5.1,1.9],
	[7.1,3,5.9,2.1],
	[6.3,2.9,5.6,1.8],
	[6.5,3,5.8,2.2],
	[7.6,3,6.6,2.1],
	[4.9,2.5,4.5,1.7],
	[7.3,2.9,6.3,1.8],
	[6.7,2.5,5.8,1.8],
	[7.2,3.6,6.1,2.5],
	[6.5,3.2,5.1,2],
	[6.4,2.7,5.3,1.9],
	[6.8,3,5.5,2.1],
	[5.7,2.5,5,2],
	[5.8,2.8,5.1,2.4],
	[6.4,3.2,5.3,2.3],
	[6.5,3,5.5,1.8],
	[7.7,3.8,6.7,2.2],
	[7.7,2.6,6.9,2.3],
	[6,2.2,5,1.5],
	[6.9,3.2,5.7,2.3],
	[5.6,2.8,4.9,2],
	[7.7,2.8,6.7,2],
	[6.3,2.7,4.9,1.8],
	[6.7,3.3,5.7,2.1],
	[7.2,3.2,6,1.8],
	[6.2,2.8,4.8,1.8],
	[6.1,3,4.9,1.8],
	[6.4,2.8,5.6,2.1],
	[7.2,3,5.8,1.6],
	[7.4,2.8,6.1,1.9],
	[7.9,3.8,6.4,2],
	[6.4,2.8,5.6,2.2],
	[6.3,2.8,5.1,1.5],
	[6.1,2.6,5.6,1.4],
	[7.7,3,6.1,2.3],
	[6.3,3.4,5.6,2.4],
	[6.4,3.1,5.5,1.8],
	[6,3,4.8,1.8],
	[6.9,3.1,5.4,2.1],
	[6.7,3.1,5.6,2.4],
	[6.9,3.1,5.1,2.3],
	[5.8,2.7,5.1,1.9],
	[6.8,3.2,5.9,2.3],
	[6.7,3.3,5.7,2.5],
	[6.7,3,5.2,2.3],
	[6.3,2.5,5,1.9],
	[6.5,3,5.2,2],
	[6.2,3.4,5.4,2.3],
	[5.9,3,5.1,1.8]])

	w,h= factorize(mat,pc=3,iter=100)

	# 分解された行列を出力
	print 'w='
	for i in range(shape(w)[0]):
		for j in range(shape(w)[1]):
			print ('%3f' % w[i,j]),
		print
	print
	print 'h='
	for i in range(shape(h)[0]):
		for j in range(shape(h)[1]):
			print ('%3f' % h[i,j]),
		print
	print
	# 元々の行列を出力
	print 'answer='
	print mat
	print
	# 分解された行列２つを掛け合わせた答えを出力
	print 'w*h='
	wh = w * h
	for i in range(shape(wh)[0]):
		for j in range(shape(wh)[1]):
			print ('%3f' % wh[i,j]),
		print

	wmax = w.max()
	w_f = w.astype(float)/wmax.astype(float)
	print(w_f)

	x1 = range(shape(w)[1]+1)
	y1 = range(shape(w)[0]+1)
	X1, Y1 = meshgrid(x1,y1)
	pcolormesh(X1, Y1,array(w_f))
	axis("tight")
	colorbar()
	show()
